# -*- encoding : utf-8 -*-
class SimulatorController < ApplicationController
  # GET /simulator
  def index
    @rooms = Home.first.rooms
    @openings = Home.first.openings

    respond_to do |format|
      format.html # index.html.erb
    end
  end

  def create
    params.each do |type,data|
      if type.match(/temperature_/)
        #logger.info type.gsub(/temperature_/,'')
        Room.find_by_id(type.gsub(/temperature_/,'')).update_attributes(temperature: data)
      end

      if type.match(/opening_/)
        #logger.info type.gsub(/opening_/,'')
        Opening.find_by_id(type.gsub(/opening_/,'')).update_attributes(opened: true) if data == "Ouverte"
        Opening.find_by_id(type.gsub(/opening_/,'')).update_attributes(opened: false) if data == "Fermée"
      end


    end

    # redirect_to simulator_index_path, :notice => "Sucessfully saved"
    redirect_to simulator_index_path, :notice => "Sauvegarde réussie"
  end

  def generateFakeDatas
    beginning = Time.now

    TemperatureMeasure.delete_all
    OpeningMeasure.delete_all
    HeatingLog.delete_all

    # Structure de TemperatureMeasure :
      #   t.integer  "room_id"
      #   t.float    "temperature"
      #   t.datetime "created_at",  :null => false
      #   t.datetime "updated_at",  :null => false
    out_temp = [13.4, 13.3, 13.2, 13.125, 12.9375, 12.8125, 12.5625, 12.375, 12.25, 12.1875, 12, 11.9375, 11.8125, 11.625, 11.4375, 11.3125, 11.25, 11.25, 11.125, 11, 10.8125, 10.6875, 10.625, 10.5625, 10.375, 10.3125, 10.25, 10.0625, 9.9375, 9.875, 9.8125, 9.75, 9.625, 9.5, 9.4375, 9.4375, 9.4375, 9.4375, 9.5, 9.5, 9.5, 9.625, 9.625, 9.6875, 9.625, 9.6875, 9.9375, 10.125, 10.25, 10.4375, 10.625, 10.5625, 10.6875, 10.75, 10.875, 11.125, 11.3125, 11.5, 11.75, 12.1875, 13.125, 13.8125, 13.9375, 13.75, 13.875, 13.9375, 14.375, 14.75, 14.9375, 15.4375, 15.5625, 16.3125, 16.875, 17.1875, 17.0625, 17.0625, 17.9375, 18.1875, 18.1875, 18, 17.75, 18.1875, 18.125, 18.25, 18.8125, 18.8125, 18.3125, 18.3125, 18.375, 18.8125, 18.0625, 19.0625, 19.4375, 19.8125, 19.8125, 19.875, 19.9375, 19.5625, 19.5, 19.6875, 19.75, 19.6875, 19.75, 20.125, 20.125, 20, 19.3125, 19.5625, 20, 19.75, 19.125, 19.125, 19.0625, 19.125, 19.0625, 19.3125, 19, 18.9375, 18.5, 18.125, 17.8125, 17.3125, 17, 16.625, 16.3125, 16.0625, 15.6875, 15.4375, 15.125, 14.875, 14.625, 14.5625, 14.4375, 14.3125, 14.25, 14.375, 14.3125, 14.0625, 13.875, 13.8125, 13.7, 13.6, 13.5, 13.5]
    in_temp = Array.new
    in_temp[0] = [18.6, 18.6, 18.5, 18.5, 18.4, 18.4, 18.3, 18.3, 18.4, 18.3, 18.3, 18.2, 18.3125, 18.3125, 18.25, 18.25, 18.1875, 18.125, 18.0625, 18, 18, 17.9375, 17.875, 17.875, 17.8125, 17.75, 17.75, 17.6875, 17.6875, 17.625, 17.5625, 17.5625, 17.5, 17.5, 17.4375, 17.4375, 17.75, 18.5, 19.0625, 19.4375, 19.625, 19.75, 19.8125, 19.9375, 19.9375, 20.125, 20.125, 19.9375, 19.6875, 19.4375, 19.1875, 18.9375, 18.9375, 19.5625, 20, 19.75, 19.9375, 20.3125, 20.375, 20.25, 20.0625, 19.8125, 20, 20.4375, 20.5, 20.4375, 20.25, 19.9375, 19.6875, 19.4375, 19.5625, 20.25, 20.5625, 20.5625, 20.375, 20.1875, 19.875, 19.6875, 19.5, 19.4375, 19.375, 19.25, 19.125, 19.4375, 20.25, 20.5625, 20.5, 20.3125, 20.25, 20.1875, 20.125, 20, 19.875, 19.6875, 19.5, 19.3125, 19.3125, 20.0625, 20.5625, 20.625, 20.5, 20.375, 20.25, 20.125, 20.0625, 20, 19.875, 19.625, 19.4375, 19.3125, 19.3125, 20, 20.625, 20.75, 20.75, 20.5625, 20.3125, 20.1875, 20, 19.875, 19.75, 19.625, 19.4375, 19.375, 19.25, 19.875, 20.5625, 20.625, 20.5625, 20.4375, 20.3125, 20.0625, 19.875, 19.75, 19.5625, 19.4375, 19.3, 19.2, 19.1, 19, 18.9, 18.8, 18.7, 18.6]
    in_temp[1] = [18.3, 18.2, 18.1, 17.9, 17.7, 17.5, 17.3, 17.1, 17, 16.9, 16.8, 16.7, 16.7, 16.5, 16.375, 16.3125, 16.25, 16.1875, 16.125, 16.0625, 16.0625, 16, 15.9375, 15.8125, 15.8125, 15.75, 15.6875, 15.625, 15.5625, 15.5, 15.4375, 15.25, 15.1875, 15.0625, 15, 14.9375, 15.1875, 15.9375, 17, 17.625, 18.0625, 18.25, 18.5625, 18.8125, 19.0625, 19.0625, 18.875, 18.625, 19, 19.1875, 19.0625, 19.3125, 19.375, 19.5625, 19.5625, 19.375, 19.375, 19.25, 19.3125, 19.3125, 19.375, 19.5625, 19.4375, 19.6875, 19.75, 19.5625, 19.6875, 19.875, 19.75, 19.4375, 19.5625, 20, 20, 19.8125, 19.4375, 19.125, 19.3125, 20, 20.0625, 19.875, 19.5625, 19.3125, 19.0625, 18.875, 19.5, 20.0625, 20.0625, 19.9375, 19.625, 19.375, 19.125, 18.9375, 18.875, 18.9375, 19.6875, 19.875, 19.75, 19.6875, 19.4375, 19.1875, 18.9375, 18.9375, 19.625, 20.125, 20.125, 19.875, 19.5625, 19.1875, 18.875, 18.875, 19.625, 20.0625, 20.0625, 19.9375, 19.625, 19.375, 19.125, 19.0625, 19.0625, 19.625, 20.0625, 20, 19.75, 19.4375, 19.0625, 18.9375, 19.3125, 20, 20.0625, 19.9375, 19.625, 19.25, 19, 18.75, 18.6, 18.6, 18.5, 18.5, 18.5, 18.4, 18.4, 18.4, 18.3, 18.3]
    in_temp[2] = [18.375, 18.25, 18.125, 18, 17.9375, 17.875, 17.8125, 17.6875, 17.625, 17.5, 17.4375, 17.375, 17.3125, 17.25, 17.1875, 17.125, 17.0625, 17, 16.9375, 16.875, 16.8125, 16.8125, 16.75, 16.6875, 16.625, 16.5625, 16.4375, 16.4375, 16.4375, 16.4375, 16.375, 16.3125, 16.25, 16.1875, 16.125, 16.0625, 15.9375, 15.875, 15.8125, 15.75, 15.8125, 16.5, 17.375, 17.9375, 18.375, 18.6875, 18.875, 18.875, 19, 19.1875, 19.25, 19.5, 19.375, 19.5625, 19.6875, 19.5625, 19.875, 19.9375, 19.8125, 19.9375, 20.3125, 20.4375, 20.3125, 20.0625, 19.75, 19.5, 20, 20.625, 20.75, 20.6875, 20.4375, 20.125, 19.8125, 19.625, 19.4375, 19.5, 20.3125, 20.875, 20.9375, 20.8125, 20.5625, 20.3125, 20.125, 19.9375, 19.75, 19.5, 19.3125, 19.25, 19.1875, 19.0625, 19.6875, 20.6875, 21.0625, 21.0625, 20.875, 20.5625, 20.3125, 20.125, 19.875, 19.6875, 19.5625, 19.625, 19.4375, 19.3125, 19.1875, 19.25, 20, 20.75, 20.875, 20.6875, 20.375, 20.1875, 20, 19.8125, 19.625, 19.5, 19.4375, 19.375, 20.125, 20.875, 21.25, 21.1875, 20.9375, 20.5625, 20.25, 20, 19.75, 19.5625, 19.5, 19.375, 19.3125, 20.0625, 21, 21.0625, 20.8125, 20.6875, 20.375, 20.1875, 19.9375, 19.625, 19.375, 19.125, 19, 18.8125]

    rooms = Room.all
    startMidnight = Time.now.midnight - 2.days;
    n_minutes = 0
    newTime = 0
    choix_temp = Array.new
    choix_temp_poss = [0, 1, 2]
    temperature_mesure = []

      begin
        newTime = (startMidnight + (n_minutes*10).minutes)
        temp = 0;
        rooms.each do |room|
          if room.isoutside?
            temp = out_temp[n_minutes%144].round(1)
          else
            if n_minutes%144 == 0
              if choix_temp[room.id].nil?
                choix_temp[room.id] = choix_temp_poss.shift
              else
                choix_temp[room.id] = (choix_temp[room.id] + 1)%3
              end
            end
            temp = in_temp[choix_temp[room.id]][n_minutes%144].round(1)
          end

          if Time.now < newTime
            room.update_attributes(temperature: temp)
          end
          temperature_mesure << TemperatureMeasure.new(
                :room_id => room.id,
                :temperature => temp,
                :created_at => (startMidnight + (n_minutes*10).minutes).to_datetime,
                :updated_at => (startMidnight + (n_minutes*10).minutes).to_datetime
                )
        end
        n_minutes = (n_minutes + 1)
      end while Time.now > newTime
    # render text: "Time elapsed #{Time.now - beginning} seconds"
    # on enregistre le brol
    TemperatureMeasure.import temperature_mesure
    redirect_to simulator_index_path, :notice => "Nouvelles données générées en #{(Time.now - beginning).round(1)} secondes !"
  end
end
